#!/usr/bin/perl

package Monitor;
use strict;
use POSIX;
use RRDs;
use JSON;
use Scalar::Util qw(looks_like_number);
use Data::Dumper;
our $verbose  = 0;
sub new
{
  my $this = bless { }, shift;
  $this->Debug(3,"");
  # @{$this->{'files'}} = ("rrd2graph.json");
  return $this;
}

sub Debug
{
  my $this = shift;
  my $level = shift;

  $level <= $verbose or return;
  print STDERR "[", strftime("%Y/%m/%d-%H:%M:%S", localtime), "] ", " " x (5-$level), (caller 1)[3], " @_\n";
}

# eval 'sub IPC_CREAT {0001000}' unless defined &IPC_CREAT;
# eval 'sub IPC_RMID {0}'        unless defined &IPC_RMID;

sub Run
{
  # start main loop
  my $this = shift;
  my $configuration = shift;
  my $serverpid = shift;
  $this->Debug(2,"");
  # print "Debug: ".Dumper($configuration->{'RRD_graph'})."\n";
  
  open(FILE, "> $configuration->{'daemon'}->{'webroot'}/rrd2graph.json") or warn $!;
  print FILE encode_json \%{$configuration->{'RRD_graph'}};
  close(FILE);

  for(;;)
  {
    # Process data
    $this->Process($configuration,'RAW_DATA');

    # Store and show extracted data
    $this->Status($configuration,'RAW_DATA');

    # Check if server is up
    # if ( !$configuration->{'daemon'}->{'noserver'}) {
      # kill(0,$serverpid) or last;
    # }

    # tempo before next process
    $configuration->{'daemon'}->{'delay'} or last;
    sleep $configuration->{'daemon'}->{'delay'};
  }
  foreach (@{$this->{'files'}}) {
    -f "$configuration->{'daemon'}->{'webroot'}/$_"
      and unlink "$configuration->{'daemon'}->{'webroot'}/$_";
  }
}

sub Process
{
  my $this = shift;
  my $configuration = shift;
  my $list = shift;
  $this->Debug(2,"Processing $list");

  $this->{$list} and delete $this->{$list};
  foreach my $host ( keys %{$configuration->{$list}} ) {
    foreach my $kpi ( @{$configuration->{$list}->{$host}} ) {
      $kpi or next;
      my $file = -f $kpi->{'source'} ? $kpi->{'source'} : "$kpi->{'source'} 2>/dev/null|";
      eval {
        local $SIG{ALRM} = sub { die "Timeout\n" };
        alarm $configuration->{'daemon'}->{'timeout'};
        open(FEED, $file) or die "Can't open $file because $!\n";
        while (<FEED>){
          @_ = /$kpi->{'regexp'}/ or next;
          if ( $kpi->{'postprocess'} ) {
             @_=eval( $kpi->{'postprocess'} );
          }
          my $i=0;
          my @names = split(',',$kpi->{'name'});
          foreach ( @_ ) {
            $this->{$list}->{$host}->{$names[$i]}=$_[$i];
            $i++;
          }
        }
        close(FEED);
        alarm 0;
      }
	}
  }
  #print Dumper(\$this);
}

sub Status
{
  my $this = shift;
  my $configuration = shift;
  my $list = shift;
  $this->Debug(2,"");

  # $this->{$list} or return;

  # my ($sec,$min,$hour,$mday,$mon,$year) = (localtime)[0,1,2,3,4,5];
  # @{$this->{$list}->{'localtime'}}=($year+1900,$mon+1,$mday,$hour,$min,$sec);

  # my $json=encode_json \%{$this->{$list}};
  # $this->Debug(4,"\n$json");

  # # if embeded server is not used, we write the json file else the
  # # data are transmitted with a shared memory
  # if ( $configuration->{'daemon'}->{'noserver'} == 1 ){
    # push (@{$this->{'files'}},"dynamic.json");
    # open(FILE, "> $configuration->{'daemon'}->{'webroot'}/rrd2graph.json")
      # or warn $!;
      # print FILE $json ;
    # close(FILE);
  # }
  # else{
    # # write current status (JSON) in shared memory
    # $configuration->{'sharedmem'}->store( $json );
  # }

  # add data in round robin database
  foreach my $host ( keys %{$configuration->{$list}} ) {
    foreach my $kpi ( @{$configuration->{$list}->{$host}} ) {
      foreach my $name ( split(',',$kpi->{'name'}) ) {
        if ( looks_like_number( $this->{$list}->{$host}->{$name} ) ) {
          #print "Update RRD ".$host."_$name.rrd\n";
          RRDs::update("$configuration->{'daemon'}->{'webroot'}/stat/".$host."_$name.rrd", "N:".$this->{$list}->{$host}->{$name});
          my $ERR=RRDs::error;
        }
        else {
          print "No real update RRD: ".$host."_$name.rrd\n";
          print "Value: '".$this->{$list}->{$host}->{$name}."'\n";
          RRDs::update("$configuration->{'daemon'}->{'webroot'}/stat/".$host."_$name.rrd", "N:U");
        }
      }
    }
  }
}

1;
